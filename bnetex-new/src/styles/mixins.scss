@import 'variables';
@import 'colors/colors';

@mixin stretch-screen {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@mixin dynamic-background($default, $hover, $active) {
  background-color: $default;

  &:hover {
    background-color: $hover;
  }

  &:active {
    background-color: $active;
  }
}

@mixin color-svg($color) {
  color: $color;

  svg {
    fill: $color;
  }
}

@mixin max-width($resolution) {
  @media (max-width: #{$resolution}px) {
    @content;
  }
}

@mixin min-width($resolution) {
  @media (min-width: #{$resolution}px) {
    @content;
  }
}

@mixin mobile() {
  @include max-width($mobile-bp) {
    @content;
  }
}

@mixin desktop() {
  @include min-width($mobile-bp + 1) {
    @content;
  }
}

@mixin size-svg($height, $width: $height) {
  svg {
    height: $height;
    width: $width;
  }
}

@mixin column-flex($gap: 0) {
  display: flex;
  flex-direction: column;
  row-gap: $gap;
}

@mixin column-flex-center($gap: 0) {
  display: flex;
  flex-direction: column;
  row-gap: $gap;
  align-items: center;
  justify-content: center;
}

@mixin align-center-row-flex($gap: 0) {
  display: flex;
  align-items: center;
  column-gap: $gap;
}

@mixin line-overflow($lines-count) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines-count;
  line-clamp: $lines-count;
}

@mixin dropDownShadow {
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

@mixin nowrap-overflow {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin with-alpha-background($color, $alpha) {
  &:before {
    content: '';
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: $color;
    opacity: $alpha;
  }
}

// 100vh на мобильных устройствах не учитывает
// размеры панелек браузера.
// этот миксин (должен) фиксить эту проблему
@mixin mobile-100vh() {
  height: 100vh;
  height: -webkit-fill-available;
}

@function set-opacity-to-color($color, $opacity) {
  @return #{$color};
}

@mixin color-index-map(
  $background-color-postfix: '',
  $color-postfix: '',
  $fill-postfix: '',
  $svg-fill-postfix: ''
) {
  @each $key, $color in $main-colors {
    &--#{'' + $key} {
      @if $background-color-postfix != '' {
        background-color: var(--#{'' + $key}-#{$background-color-postfix});
      }
      @if $color-postfix != '' {
        color: var(--#{'' + $key}-#{$color-postfix});
      }
      @if $fill-postfix != '' {
        fill: var(--#{'' + $key}-#{$fill-postfix});
      }
      @if $svg-fill-postfix != '' {
        svg {
          fill: var(--#{'' + $key}-#{$svg-fill-postfix});
        }
      }
    }
  }
}
